@page "/SignUp"
@using Domain;
@using BusinessLogic;
@inject NavigationManager NavigationManager
@inject Manager manager;

<h1>Crear Usuario</h1>


    <label>Nombre:</label>
    <InputText @bind-Value="nombre" @oninput="ValidateName" />
    @if (!string.IsNullOrEmpty(nameError))
    {
        <div class="alert alert-danger">@nameError</div>
    }

    <label>Contraseña:</label>
    <InputText type="password" @bind-Value="contra" @oninput="ValidatePassword" />
    @if (!string.IsNullOrEmpty(passwordError))
    {
        <div class="alert alert-danger">@passwordError</div>
    }

    <label>Confirmar contraseña:</label>
    <InputText type="password" @bind-Value="passwordConfirmation" @oninput="ValidatePasswordConfirmation" />
    @if (!string.IsNullOrEmpty(differentPassword))
    {
        <div class="alert alert-danger">@differentPassword</div>
    }

    <button @onclick="EnviarForm" disabled="@(!CanSubmit())">Enviar</button>


   
    
    @if (!string.IsNullOrEmpty(startSessions))
    {
        <div class="alert alert-danger">@startSessions</div>
    }





@code {
    private string nombre = "";
    private string contra = "";
    private string passwordConfirmation = "";
    private string nameError = "";
    private string passwordError = "";
    private string differentPassword = "";
    private string startSessions = "";


    Client newClient = new Client();

    private bool CanSubmit()
    {
        return string.IsNullOrEmpty(nameError) && string.IsNullOrEmpty(passwordError) && string.IsNullOrEmpty(differentPassword);
    }

    private void ValidateName(ChangeEventArgs e)
    {
        nombre = (string)e.Value;

        if (!newClient.VerifyName(nombre))
        {
            nameError = "El nombre debe contener:Mayuscula - Numero- Sin espacios -Entre 3 a 20 letras";
            return;
        }

        nameError = string.Empty;
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        contra = (string)e.Value;

        if (!newClient.VerifyPassword(contra))
        {
            passwordError = "La contraseña debe contener: Mayuscula- Numero- Entre 5 y 25 letras";
            return;
        }

        passwordError = string.Empty;
    }

    private void ValidatePasswordConfirmation(ChangeEventArgs e)
    {
        passwordConfirmation = (string)e.Value;

        if (!MatchingPasswords(contra, passwordConfirmation))
        {
            differentPassword = "Las contraseñas no coinciden";
            return;
        }

        differentPassword = string.Empty;
    }

    public bool MatchingPasswords(string password, string confirmation)
    {
        if (password.Length != confirmation.Length)
        {
            return false;
        }

        for (int i = 0; i < password.Length; i++)
        {
            if (password[i] != confirmation[i])
            {
                return false;
            }
        }

        return true;
    }

    private void EnviarForm()
    {
        if (manager.Exists(nombre))
        {
            nameError = "El nombre de usuario ya existe";
     
            return;
        }

        if (!CanSubmit())
        {
            return;
        }

        newClient = new Client(nombre, contra);
        manager.add(newClient);
        manager.logIn(nombre, contra);
        startSessions = "Se creo un cliente nuevo";

        NavigationManager.NavigateTo("/logged");
    
     }
    
}
