@page "/scene/{name}"
@using Interface.BusinessLogic;
@using Interface.DataAccess;
@using Domain;
@using Engine;
@using Exceptions;
@using Microsoft.JSInterop
@inject SessionManager sessionManager;
@inject ApplicationContext applicationContext;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;


<h3>Scene:  @name</h3>


<div class="form-group">
	<label for="name">Modelos Disponibles:</label>

	<ul>
		@foreach (var model in modelRepository.GetModels())
		{
			<button type="button" class="btn btn-success btn-sm" @onclick="(() => SelectedModel(model))">@model.name</button>
		}
	</ul>
</div>

<div>
	@if (showForm)
	{
		<form id="myForm1">
			<label>CoordenadaX:</label>
			<input type="number" style="width:100px" class="form-control" @bind-value="coordinateX" />
			<label>CoordenadaY:</label>
			<input type="number" style="width:100px" class="form-control" @bind-value="coordinateY" />
			<label>CoordenadaZ:</label>
			<input type="number" style="width:100px" class="form-control" @bind-value="coordinateZ" />
			<button @onclick="AddPositionedModel">Agregar Modelo Posicionado</button>
		</form>
	}
</div>



<div class="form-group">
	<table>
		<thead>
			<tr>
				<th>Modelos Posicionados</th>
			</tr>
		</thead>
		<tbody>
			@foreach (PositionedModel positionedModel in positionedModels)
			{
				<tr>
					<td>@positionedModel.ToString()</td>
					<td><button type="button" class="btn btn-danger btn-sm" @onclick="(() => positionedModelRepository.Delete(positionedModel))">Eliminar</button></td>

				</tr>
			}
		</tbody>
	</table>
</div>




<div class="form-group">
	<label for="lookFrom">Look From:</label>

	<form id="LookFrom">
		<input type="number" style="width:100px" class="form-control" @bind-value="LookFromX" />
		<input type="number" style="width:100px" class="form-control" @bind-value="LookFromY" />
		<input type="number" style="width:100px" class="form-control" @bind-value="LookFromZ" />

	</form>
</div>


<div class="form-group">
	<label for="lookAt">Look At:</label>

	<form id="LookAt">
		<input type="number" style="width:100px" class="form-control" @bind-value="LookAtX" />
		<input type="number" style="width:100px" class="form-control" @bind-value="LookAtY" />
		<input type="number" style="width:100px" class="form-control" @bind-value="LookAtZ" />

	</form>
</div>


<div class="form-group">
	<label for="FoV">FoV:</label>

	<form id="Fov">
		<input type="number" class="form-control" @bind-value="fov" />
	</form>
</div>

@if (showFovError)
{
	<div class="alert alert-danger"> @invalidFov </div>
}

<div>
	<p>Desenfoque:</p>
	<InputCheckbox @bind-Value="@isDifuminated" />
</div>

@if (isDifuminated)
{
	<div>
		<label>Apertura del lente:</label>
		<input type="number" class="form-control" @bind-value="aperture" />
	</div>

	@if (showApertureError)
	{
		<div class="alert alert-danger"> @apertureError </div>
	}

}

<button class="btn btn-primary" @onclick="ToRender">Renderizar</button>



<div class="form-group">
	<label for="name">Preview:</label>
	<img src="@String.Concat("images/",sessionManager.CurrentUser.name,"/",scene.name,".png")" style="width: 300px; height: 200px;" />

	<p class="text-start">Último renderizado: @scene.lastRendered</p>
	@if (scene.lastRendered < scene.lastModified)
	{
		<div class="alert alert-warning" role="alert">
			<i class="fa-solid fa-triangle-exclamation">Imagen desactualizada</i>
		</div>
	}
</div>

<div>



	<button @onclick="DownloadFile">Guarda tu Escena</button>

	<select @bind="formatoSeleccionado" >

		<option values= ".png">PNG</option>
		<option values=".jpg">JPG</option>	
		<option values=".ppm">PPM</option>

	</select>


	



</div>


@code {

	private ModelRepository modelRepository;
	private SceneRepository sceneRepository;
	private PositionedModelRepository positionedModelRepository;

	private bool isDifuminated = false;

	private double aperture = 0;

	private bool showForm = false;
	private double coordinateX = 0;
	private double coordinateY = 0;
	private double coordinateZ = 0;

	private double LookFromX = 0;
	private double LookFromY = 2;
	private double LookFromZ = 0;


	private double LookAtX = 0;
	private double LookAtY = 2;
	private double LookAtZ = 5;


	private int fov = 30;

	private string apertureError = "";
	private bool showApertureError = false;
	private bool showFovError = false;
	private string invalidFov = "";
	private bool showButton = false;

	private Model selectedModel;
	private Render render;

	private List<PositionedModel> positionedModels;

	private string formatoSeleccionado;

	protected override void OnInitialized()
	{
		sceneRepository = new SceneRepository(sessionManager, applicationContext);
		modelRepository = new ModelRepository(sessionManager, applicationContext);
		positionedModelRepository = new PositionedModelRepository(sessionManager, applicationContext);
		scene = sceneRepository.GetSceneByName(name);
		positionedModels = sceneRepository.GetPositionedModels(scene);
	}

	public async Task<Stream> DownloadFile()
	{
		Stream fileStream = render.ConvertImageToStream();

		string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", sessionManager.CurrentUser.name, scene.name,".png");
		await JSRuntime.InvokeVoidAsync("downloadFile", path);

		return fileStream;
	}









	private void SelectedModel(Model modelo)
	{
		selectedModel = modelo;

		showForm = true;

	}


	void AddPositionedModel()
	{

		Coordinate coordinates = new Coordinate();

		if (coordinates.VerifyCoordinate(coordinateX, coordinateY, coordinateZ))
		{
			coordinates.x = coordinateX;
			coordinates.y = coordinateY;
			coordinates.z = coordinateZ;
			positionedModelRepository.Create(scene, selectedModel, coordinates);


		}
		coordinateX = 0;
		coordinateY = 0;
		coordinateZ = 0;

		showForm = false;

	}


	void ToRender()
	{
		showApertureError = false;
		showFovError = false;
		Coordinate lookFrom = new Coordinate(LookFromX, LookFromY, LookFromZ);
		Coordinate lookAt = new Coordinate(LookAtX, LookAtY, LookAtZ);
		try
		{
			sceneRepository.Render(scene, fov, isDifuminated, lookFrom, lookAt, aperture);
			NavigationManager.NavigateTo("/scene/" + name, true);
		}
		catch (FovOutOfBoundException e)
		{
			showFovError = true;
			invalidFov = e.Message;
		}
		catch (InvalidDataException e)
		{
			showApertureError = true;
			apertureError = e.Message;
		}



	}





	[Parameter]
	public string name { get; set; }
	private Scene scene;
	
}