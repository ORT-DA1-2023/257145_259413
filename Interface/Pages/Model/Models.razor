@using Interface.BusinessLogic;
@using Domain;
@using Engine;
@using Interface.DataAccess;
@inject SessionManager sessionManager;
@inject ApplicationContext applicationContext;
@inject NavigationManager NavigationManager; 
@page "/model";

<h3>Model</h3>

<InputText @bind-Value="name"   placeholder="Mi modelo planeta"/>
@if (!string.IsNullOrEmpty(nameError))
{
    <div class="alert alert-danger">@nameError</div>

}

<div>

<label for="Figures">Figuras</label>

<select class="form-control" id="Figures" @onchange="figureSelection">
    <option disabled selected value= "">Selecciona la figura</option>
        @foreach (var figure in figureRepository.GetFigures())
    {
        <option value="@figure.name">@figure.name</option>
    }
</select>
</div>
<label for="Material">Materiales</label>
<select class="form-control" id="Material" @onchange="materialSelection">
    <option  disabled selected value="">Selecciona el material</option>
    @foreach (var material in materialRepository.GetMaterials())
    {
        <option value="@material.name">@material.name</option>
    }
</select>

<div>
    <p>Generar preview al guardar</p>
    <InputCheckbox @bind-Value="@isChecked"/>
</div>

<button type="button" class="btn btn-primary" @onclick="CreateModel">Guardar</button>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger"> @errorMessage </div>
}

 @if (!string.IsNullOrEmpty(successMessage))
 {
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
 }





<button type="button" class="btn btn-primary" @onclick="SeeModel">Ver Modelos</button>




@code {
    private string name="";
    private string nameError;
    private string errorMessage;
    private string selectedMaterial;
    private Material material;
    private string selectedFigure;
    private Figure figure;
    private bool isChecked = false;
    private string successMessage; 
    private FigureRepository figureRepository;
    private MaterialRepository materialRepository;
    private ClientRepository clientRepository;
    private ModelRepository modelRepository;

    Model model = new Model("");

    void figureSelection(ChangeEventArgs e)
    {
        selectedFigure = e.Value.ToString();
        figure = figureRepository.MatchingFigure(selectedFigure);
    }

    void materialSelection(ChangeEventArgs e)
    {
        selectedMaterial = e.Value.ToString();
        material = materialRepository.MatchingMaterial(selectedMaterial);
    }

    void CreateModel()
    {
        errorMessage = "";
        try
        {
            if (model.VerifyName(name) && !String.IsNullOrEmpty(selectedMaterial) && !String.IsNullOrEmpty(selectedFigure))
            {
                modelRepository.CreateModel(name, figure, material);
                successMessage = "Creación Exitosa";


                if (isChecked)
                {
                    Model toPreview = modelRepository.Find(name);
                    Render.CreatePreview(toPreview, sessionManager.CurrentUser.name);
                }
                name = "";
                NavigationManager.NavigateTo("/model", true);

            }
            else
            {
                errorMessage = "Por favor seleccione una figura y un material";
            }
        }
        catch(InvalidDataException ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void SeeModel()
    {
        NavigationManager.NavigateTo("/model/list");
    }

    protected override void OnInitialized()
    {
        figureRepository = new FigureRepository(sessionManager, applicationContext);
        modelRepository = new ModelRepository(sessionManager, applicationContext);
        materialRepository= new MaterialRepository(sessionManager, applicationContext);
        clientRepository = new ClientRepository(applicationContext, sessionManager);
    }


}
